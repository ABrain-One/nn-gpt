{
  "single_block_model": {
    "comment": [
      "Template for ONE-block models generated by rag_AlterNN.",
      "Place-holders provided by the driver:",
      "  {block_name}      - file stem (e.g. DepthwiseSeparableConv)",
      "  {block_class}     - real class name read from the file",
      "  {init_signature}  - exact __init__(...) line for the block"
    ],

    "input_list": [],
    "addon_list": [],
    "task": null,
    "addon_task": null,

    "prompt": [
      "### Objective",
      "Write **one** PyTorch model class called `SingleBlockNet` that",
      "subclasses `nn.Module` and instantiates **exactly one**",
      "`{block_class}` inside `__init__` using the constructor:",
      "```python",
      "{init_signature}",
      "```",
      "",
      "### Rules",
      "1. Do **NOT** import or redefine `{block_class}` - it is already in scope.",
      "2. You may add standard `nn` layers (e.g. `Linear`, `ReLU`) but no",
      "   extra helper classes. Only ONE `{block_class}` instance.",
      "3. Implement `forward()` to pass the input through that block once.",
      "4. Provide `def supported_hyperparameters(): return ['lr', 'momentum']`.",
      "5. **Return exactly one fenced Python code block. No prose, no markdown.**"
    ]
  }
}
