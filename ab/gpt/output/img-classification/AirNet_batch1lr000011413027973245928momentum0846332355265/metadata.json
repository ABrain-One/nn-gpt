{
    "task": "img-classification",
    "nn": "AirNet",
    "prm": {
        "batch": 1,
        "lr": 0.00011413027973245928,
        "momentum": 0.8463323552659132,
        "transform": "echo_299"
    },
    "transform_code": "import torchvision.transforms as transforms\n\ndef transform(_):\n    return transforms.Compose([\n        transforms.Resize((299,299)),\n        transforms.ToTensor()])",
    "accuracy": 0.6622081955715861,
    "addon_accuracy": 0.6916,
    "metric": "acc",
    "metric_code": "import torch\nfrom ab.nn.metric.base.base import BaseMetric\n\nclass Accuracy(BaseMetric):\n    def reset(self):\n        self.correct = 0\n        self.total = 0\n    \n    def update(self, outputs, targets):\n        _, predicted = torch.max(outputs.data, 1)\n        correct = (predicted == targets).sum().item()\n        total = targets.size(0)\n        self.correct += correct\n        self.total += total\n    \n    def __call__(self, outputs, targets):\n        _, predicted = torch.max(outputs.data, 1)\n        correct = (predicted == targets).sum().item()\n        total = targets.size(0)\n        self.update(outputs, targets)\n        return correct, total\n    \n    def result(self):\n        return self.correct / max(self.total, 1e-8)\n\n# Function to create metric instance\ndef create_metric(out_shape=None):\n    return Accuracy()\n",
    "duration": 549499655524.0,
    "template_used": "improvement_classification_codeonly",
    "model_name": "deepseek-ai/deepseek-coder-1.3b-instruct"
}